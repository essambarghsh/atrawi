{"version":3,"file":"js/app.js","mappings":";;;;;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gCAAgC,mBAAO,CAAC,4CAAc;AACtD,iBAAiB,mBAAO,CAAC,gDAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAoB;AACnC;AACA,KAAK;AACL;AACA,QAAQ,IAAqC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAe;;;;;;;;;;;ACrCF;AACb;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB,mBAAO,CAAC,iDAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAe;;;;;;;;;;;ACjIF;AACb;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sCAAsC,mBAAO,CAAC,qEAA2B;AACzE,iBAAiB,mBAAO,CAAC,iDAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,qBAAqB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAe;;;;;;;;;;;ACxGF;AACb;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,eAAe;AACf,kBAAkB;AAClB,gBAAgB;AAChB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc,EAAE,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc,EAAE,QAAQ;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,cAAc,EAAE,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,IAAqC;AAC7C,uBAAuB,cAAc,UAAU,QAAQ;AACvD;AACA;;;;;;;UC3CA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://atrawi/./src/ts/app.ts","webpack://atrawi/./src/ts/components/mobile-menu.ts","webpack://atrawi/./src/ts/core/theme.ts","webpack://atrawi/./src/ts/utils/logger.ts","webpack://atrawi/webpack/bootstrap","webpack://atrawi/webpack/before-startup","webpack://atrawi/webpack/startup","webpack://atrawi/webpack/after-startup"],"sourcesContent":["\"use strict\";\n/**\n * Main entry point for Atrawi theme JavaScript\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst theme_1 = __importDefault(require(\"./core/theme\"));\nconst logger_1 = require(\"./utils/logger\");\n/**\n * Initialize the theme when the DOM is ready\n */\nfunction initTheme() {\n    // Get theme version from meta tag if available\n    const versionMeta = document.querySelector('meta[name=\"theme-version\"]');\n    const themeVersion = versionMeta ? versionMeta.getAttribute('content') : '1.0.0';\n    // Initialize theme singleton\n    const theme = theme_1.default.getInstance({\n        debug: process.env.NODE_ENV !== 'production',\n        version: themeVersion || '1.0.0'\n    });\n    // Make theme accessible globally for debugging\n    if (process.env.NODE_ENV !== 'production') {\n        window.AtrawiTheme = theme;\n        (0, logger_1.logInfo)('Theme initialized and available via window.AtrawiTheme');\n    }\n}\n/**\n * Initialize on DOM ready\n */\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initTheme);\n}\nelse {\n    initTheme();\n}\nexports.default = initTheme;\n","\"use strict\";\n/**\n * Mobile Menu Component\n * Handles mobile menu toggle functionality\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst logger_1 = require(\"../utils/logger\");\nclass MobileMenu {\n    /**\n     * Initialize the mobile menu component\n     * @param options Component options\n     */\n    constructor(options) {\n        this.toggle = null;\n        this.menu = null;\n        this.isOpen = false;\n        this.options = options;\n        this.init();\n    }\n    /**\n     * Initialize the mobile menu\n     */\n    init() {\n        var _a, _b;\n        this.toggle = document.querySelector(((_a = this.options.selectors) === null || _a === void 0 ? void 0 : _a.toggle) || '.mobile-menu-toggle');\n        this.menu = document.querySelector(((_b = this.options.selectors) === null || _b === void 0 ? void 0 : _b.menu) || '.mobile-menu');\n        if (!this.toggle || !this.menu) {\n            if (this.options.debug) {\n                (0, logger_1.logError)('Mobile menu elements not found');\n            }\n            return;\n        }\n        this.setupEventListeners();\n        if (this.options.debug) {\n            (0, logger_1.logInfo)('Mobile menu initialized');\n        }\n    }\n    /**\n     * Set up event listeners for the mobile menu\n     */\n    setupEventListeners() {\n        if (!this.toggle)\n            return;\n        // Add click event to toggle button\n        this.toggle.addEventListener('click', this.handleToggleClick.bind(this));\n        // Close menu when clicking outside\n        document.addEventListener('click', (event) => {\n            var _a, _b;\n            if (!this.isOpen)\n                return;\n            const target = event.target;\n            if (!((_a = this.menu) === null || _a === void 0 ? void 0 : _a.contains(target)) && !((_b = this.toggle) === null || _b === void 0 ? void 0 : _b.contains(target))) {\n                this.closeMenu();\n            }\n        });\n        // Close menu on ESC key\n        document.addEventListener('keydown', (event) => {\n            if (event.key === 'Escape' && this.isOpen) {\n                this.closeMenu();\n            }\n        });\n    }\n    /**\n     * Handle mobile menu toggle click\n     * @param event Click event\n     */\n    handleToggleClick(event) {\n        event.preventDefault();\n        if (this.isOpen) {\n            this.closeMenu();\n        }\n        else {\n            this.openMenu();\n        }\n    }\n    /**\n     * Open the mobile menu\n     */\n    openMenu() {\n        var _a;\n        if (!this.menu)\n            return;\n        this.menu.classList.remove('hidden');\n        this.menu.setAttribute('aria-hidden', 'false');\n        (_a = this.toggle) === null || _a === void 0 ? void 0 : _a.setAttribute('aria-expanded', 'true');\n        this.isOpen = true;\n        // Add animation class\n        requestAnimationFrame(() => {\n            var _a;\n            (_a = this.menu) === null || _a === void 0 ? void 0 : _a.classList.add('menu-open');\n        });\n        // Prevent body scrolling when menu is open\n        document.body.style.overflow = 'hidden';\n        if (this.options.debug) {\n            (0, logger_1.logInfo)('Mobile menu opened');\n        }\n    }\n    /**\n     * Close the mobile menu\n     */\n    closeMenu() {\n        var _a;\n        if (!this.menu)\n            return;\n        this.menu.classList.remove('menu-open');\n        (_a = this.toggle) === null || _a === void 0 ? void 0 : _a.setAttribute('aria-expanded', 'false');\n        this.isOpen = false;\n        // Add a small delay before hiding the menu to allow for animation\n        setTimeout(() => {\n            var _a, _b;\n            (_a = this.menu) === null || _a === void 0 ? void 0 : _a.classList.add('hidden');\n            (_b = this.menu) === null || _b === void 0 ? void 0 : _b.setAttribute('aria-hidden', 'true');\n            // Restore body scrolling\n            document.body.style.overflow = '';\n        }, 300);\n        if (this.options.debug) {\n            (0, logger_1.logInfo)('Mobile menu closed');\n        }\n    }\n    /**\n     * Handle window resize event\n     */\n    onResize() {\n        // If window is resized to desktop size, close the mobile menu\n        if (window.innerWidth >= 768 && this.isOpen) {\n            this.closeMenu();\n        }\n    }\n}\nexports.default = MobileMenu;\n","\"use strict\";\n/**\n * Core Theme class that implements the Singleton pattern\n * and handles the initialization of all theme components\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst mobile_menu_1 = __importDefault(require(\"../components/mobile-menu\"));\nconst logger_1 = require(\"../utils/logger\");\nclass Theme {\n    /**\n     * Get the singleton instance of the Theme class\n     * @param options Theme initialization options\n     * @returns Theme instance\n     */\n    static getInstance(options) {\n        if (!Theme.instance) {\n            Theme.instance = new Theme(options);\n        }\n        return Theme.instance;\n    }\n    /**\n     * Private constructor to prevent direct instantiation\n     * @param options Theme initialization options\n     */\n    constructor(options) {\n        this.components = new Map();\n        this.options = options;\n        this.init();\n    }\n    /**\n     * Initialize the theme and all its components\n     */\n    init() {\n        if (this.options.debug) {\n            (0, logger_1.logInfo)(`Atrawi Theme initialized (v${this.options.version})`);\n        }\n        this.registerComponents();\n        this.setupEventListeners();\n    }\n    /**\n     * Register all theme components\n     */\n    registerComponents() {\n        // Initialize mobile menu\n        this.components.set('mobileMenu', new mobile_menu_1.default({\n            selectors: {\n                toggle: '.mobile-menu-toggle',\n                menu: '.mobile-menu'\n            },\n            debug: this.options.debug\n        }));\n    }\n    /**\n     * Set up global event listeners\n     */\n    setupEventListeners() {\n        // Handle resize events\n        window.addEventListener('resize', this.handleResize.bind(this));\n        // Handle scroll events with debounce\n        let scrollTimeout = null;\n        window.addEventListener('scroll', () => {\n            if (scrollTimeout) {\n                window.clearTimeout(scrollTimeout);\n            }\n            scrollTimeout = window.setTimeout(() => {\n                this.handleScroll();\n            }, 100);\n        });\n    }\n    /**\n     * Handle window resize events\n     */\n    handleResize() {\n        // Notify all components about the resize event\n        this.components.forEach(component => {\n            if (typeof component.onResize === 'function') {\n                component.onResize();\n            }\n        });\n    }\n    /**\n     * Handle window scroll events\n     */\n    handleScroll() {\n        // Notify all components about the scroll event\n        this.components.forEach(component => {\n            if (typeof component.onScroll === 'function') {\n                component.onScroll();\n            }\n        });\n    }\n    /**\n     * Get a specific component by name\n     * @param name Component name\n     * @returns Component instance or undefined\n     */\n    getComponent(name) {\n        return this.components.get(name);\n    }\n}\nTheme.instance = null;\nexports.default = Theme;\n","\"use strict\";\n/**\n * Logger utility for consistent logging throughout the theme\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.logInfo = logInfo;\nexports.logWarning = logWarning;\nexports.logError = logError;\nexports.logDebug = logDebug;\nconst THEME_PREFIX = '[Atrawi]';\n/**\n * Log an informational message\n * @param message Message to log\n * @param data Optional data to log\n */\nfunction logInfo(message, data) {\n    console.log(`${THEME_PREFIX} ${message}`, data || '');\n}\n/**\n * Log a warning message\n * @param message Warning message to log\n * @param data Optional data to log\n */\nfunction logWarning(message, data) {\n    console.warn(`${THEME_PREFIX} ${message}`, data || '');\n}\n/**\n * Log an error message\n * @param message Error message to log\n * @param data Optional data to log\n */\nfunction logError(message, data) {\n    console.error(`${THEME_PREFIX} ${message}`, data || '');\n}\n/**\n * Log a message only when in development mode\n * @param message Message to log\n * @param data Optional data to log\n */\nfunction logDebug(message, data) {\n    if (process.env.NODE_ENV !== 'production') {\n        console.log(`${THEME_PREFIX} [DEBUG] ${message}`, data || '');\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/ts/app.ts\");\n",""],"names":[],"sourceRoot":""}