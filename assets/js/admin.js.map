{"version":3,"file":"js/admin.js","mappings":";;;;;;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,cAAc;AACzE;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,mBAAO,CAAC,+DAAkB;AACxE;AACA,KAAK;AACL;AACA,KAAK;AACL;;;;;;;;;;;AC9Ca;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,kBAAe;;;;;;;UCrLf;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://atrawi/./src/ts/core/admin/admin.ts","webpack://atrawi/./src/ts/core/admin/theme-settings.ts","webpack://atrawi/webpack/bootstrap","webpack://atrawi/webpack/before-startup","webpack://atrawi/webpack/startup","webpack://atrawi/webpack/after-startup"],"sourcesContent":["\"use strict\";\n// File: src/ts/core/admin/admin.ts\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\n/**\n * Main entry point for Atrawi theme JavaScript\n */\n// Import admin functionality if in admin area\nif (typeof window !== 'undefined' && window.wp && typeof window.wp.customize === 'undefined') {\n    // Check if we're in the WordPress admin (but not in the customizer)\n    Promise.resolve().then(() => __importStar(require('./theme-settings'))).then(module => {\n        // Admin functionality loaded\n    }).catch(error => {\n        console.error('Error loading admin functionality:', error);\n    });\n}\n","\"use strict\";\n// File: src/ts/core/admin/theme-settings.ts\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass ThemeSettings {\n    constructor() {\n        this.hasChanges = false;\n        this.tabs = document.querySelectorAll('.atrawi-tab');\n        this.forms = document.querySelectorAll('.atrawi-settings-form form');\n        this.saveButton = document.querySelector('.atrawi-save-settings');\n        this.saveStatus = document.querySelector('.atrawi-save-status');\n        this.saveStatusText = document.querySelector('.atrawi-save-status-text');\n        this.saveStatusIcon = document.querySelector('.atrawi-save-status-icon');\n        this.spinner = document.querySelector('.atrawi-spinner');\n        this.init();\n    }\n    /**\n     * Initialize the theme settings.\n     */\n    init() {\n        this.setupTabNavigation();\n        this.setupFormHandling();\n        this.setupSaveButton();\n    }\n    /**\n     * Setup tab navigation.\n     */\n    setupTabNavigation() {\n        if (!this.tabs || this.tabs.length === 0) {\n            return;\n        }\n        this.tabs.forEach((tab) => {\n            tab.addEventListener('click', (e) => {\n                e.preventDefault();\n                // Check for unsaved changes\n                if (this.hasChanges) {\n                    if (!confirm('You have unsaved changes. Are you sure you want to leave this tab?')) {\n                        return;\n                    }\n                }\n                // Get the URL from the tab link\n                const url = tab.href;\n                // Navigate to the URL\n                window.location.href = url;\n            });\n        });\n    }\n    /**\n     * Setup form handling.\n     */\n    setupFormHandling() {\n        if (!this.forms || this.forms.length === 0) {\n            return;\n        }\n        // Prevent default form submission\n        this.forms.forEach((form) => {\n            form.addEventListener('submit', (e) => {\n                e.preventDefault();\n            });\n            // Track changes to form fields\n            form.querySelectorAll('input, select, textarea').forEach((field) => {\n                field.addEventListener('change', () => {\n                    this.hasChanges = true;\n                    this.updateSaveStatus('unsaved');\n                });\n            });\n        });\n    }\n    /**\n     * Setup save button.\n     */\n    setupSaveButton() {\n        if (!this.saveButton) {\n            return;\n        }\n        this.saveButton.addEventListener('click', () => {\n            this.saveSettings();\n        });\n    }\n    /**\n     * Save settings via AJAX.\n     */\n    saveSettings() {\n        if (!this.forms || this.forms.length === 0) {\n            return;\n        }\n        // Show saving status\n        this.updateSaveStatus('saving');\n        // Collect all form data\n        const settingsData = {};\n        this.forms.forEach((form) => {\n            const formData = new FormData(form);\n            const optionGroup = form.getAttribute('data-option-group') || 'atrawi_settings';\n            if (!settingsData[optionGroup]) {\n                settingsData[optionGroup] = {};\n            }\n            for (const [key, value] of formData.entries()) {\n                settingsData[optionGroup][key] = value;\n            }\n        });\n        // Get current section\n        const urlParams = new URLSearchParams(window.location.search);\n        const currentSection = urlParams.get('section') || '';\n        // Send AJAX request\n        fetch(window.atrawiAdmin.ajaxUrl, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: new URLSearchParams({\n                action: 'atrawi_save_settings',\n                nonce: window.atrawiAdmin.nonce,\n                settings: JSON.stringify(settingsData),\n                section: currentSection\n            })\n        })\n            .then(response => response.json())\n            .then(response => {\n            if (response.success) {\n                this.updateSaveStatus('saved');\n                this.hasChanges = false;\n                // Reset status after a delay\n                setTimeout(() => {\n                    if (!this.hasChanges) {\n                        this.updateSaveStatus('');\n                    }\n                }, 3000);\n            }\n            else {\n                this.updateSaveStatus('error', response.data.message || 'Error saving settings.');\n            }\n        })\n            .catch(error => {\n            console.error('Error saving settings:', error);\n            this.updateSaveStatus('error', 'Error saving settings.');\n        });\n    }\n    /**\n     * Update save status.\n     *\n     * @param status Status: 'saving', 'saved', 'error', 'unsaved', or empty for default.\n     * @param message Optional status message.\n     */\n    updateSaveStatus(status, message) {\n        if (!this.saveStatus || !this.saveStatusText || !this.saveStatusIcon || !this.spinner) {\n            return;\n        }\n        // Remove all status classes\n        this.saveStatus.classList.remove('saving', 'saved', 'error', 'unsaved');\n        // Add appropriate class and message\n        if (status) {\n            this.saveStatus.classList.add(status);\n            switch (status) {\n                case 'saving':\n                    this.saveStatusText.textContent = 'Saving changes...';\n                    this.spinner.classList.add('is-active');\n                    break;\n                case 'saved':\n                    this.saveStatusText.textContent = message || 'Changes saved successfully!';\n                    this.spinner.classList.remove('is-active');\n                    break;\n                case 'error':\n                    this.saveStatusText.textContent = message || 'Error saving changes.';\n                    this.spinner.classList.remove('is-active');\n                    break;\n                case 'unsaved':\n                    this.saveStatusText.textContent = 'You have unsaved changes.';\n                    this.spinner.classList.remove('is-active');\n                    break;\n            }\n        }\n        else {\n            // Default state (no message)\n            this.saveStatusText.textContent = '';\n            this.spinner.classList.remove('is-active');\n        }\n    }\n}\n// Initialize the theme settings when the DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n    new ThemeSettings();\n});\nexports.default = ThemeSettings;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/ts/core/admin/admin.ts\");\n",""],"names":[],"sourceRoot":""}